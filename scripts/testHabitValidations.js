const { PrismaClient } = require('@prisma/client');
const { habitService } = require('../services/habits');

const prisma = new PrismaClient();

async function testHabitValidations() {
  console.log('üß™ D√©but des tests de validation des habitudes\n');

  try {
    // Cr√©er un utilisateur de test
    console.log('Cr√©ation de l\'utilisateur de test');
    const testEmail = `test${Date.now()}@example.com`;
    const testUser = await prisma.user.create({
      data: {
        email: testEmail,
        name: 'Test User',
        password: 'hashed_password_here',
      },
    });
    console.log('‚úÖ Utilisateur de test cr√©√©\n');

    // Test 1: Cr√©ation d'une habitude valide
    console.log('Test 1: Cr√©ation d\'une habitude valide');
    const validHabit = await habitService.createHabit({
      name: 'Test Habit',
      description: 'Test Description',
      color: '#FF0000',
      frequency: 'daily',
      daysOfWeek: ['monday', 'wednesday', 'friday'],
      userId: testUser.id,
    });
    console.log('‚úÖ Succ√®s: Habitude cr√©√©e\n');

    // Test 2: Cr√©ation d'une entr√©e valide
    console.log('Test 2: Cr√©ation d\'une entr√©e valide');
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const validEntry = await habitService.createHabitEntry({
      habitId: validHabit.id,
      date: today,
      completed: true,
    });
    console.log('‚úÖ Succ√®s: Entr√©e cr√©√©e\n');

    // Test 3: Tentative de cr√©ation d'une habitude avec une fr√©quence invalide
    console.log('Test 3: Cr√©ation d\'une habitude avec fr√©quence invalide');
    try {
      await habitService.createHabit({
        name: 'Invalid Habit',
        frequency: 'invalid',
        daysOfWeek: ['monday'],
        userId: testUser.id,
      });
      console.log('‚ùå √âchec: L\'habitude invalide a √©t√© cr√©√©e\n');
    } catch (error) {
      console.log('‚úÖ Succ√®s: L\'erreur a √©t√© d√©tect√©e:', error.message, '\n');
    }

    // Test 4: Tentative de cr√©ation d'une entr√©e dans le futur
    console.log('Test 4: Cr√©ation d\'une entr√©e dans le futur');
    const futureDate = new Date();
    futureDate.setDate(futureDate.getDate() + 1);
    try {
      await habitService.createHabitEntry({
        habitId: validHabit.id,
        date: futureDate,
        completed: true,
      });
      console.log('‚ùå √âchec: L\'entr√©e future a √©t√© cr√©√©e\n');
    } catch (error) {
      console.log('‚úÖ Succ√®s: L\'erreur a √©t√© d√©tect√©e:', error.message, '\n');
    }

    // Test 5: V√©rification des statistiques
    console.log('Test 5: V√©rification des statistiques');
    const stats = await habitService.getHabitStats(validHabit.id);
    console.log('Statistiques:', stats);
    console.log('‚úÖ Succ√®s: Statistiques r√©cup√©r√©es\n');

    // Nettoyage
    console.log('Nettoyage des donn√©es de test');
    await prisma.habitEntry.deleteMany({
      where: {
        habitId: validHabit.id,
      },
    });
    await prisma.habit.deleteMany({
      where: {
        userId: testUser.id,
      },
    });
    await prisma.user.delete({
      where: { id: testUser.id },
    });
    console.log('‚úÖ Donn√©es de test nettoy√©es\n');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  } finally {
    await prisma.$disconnect();
  }

  console.log('üèÅ Fin des tests');
}

testHabitValidations(); 